// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package dynamicroles.actions;

import com.mendix.core.Core;
import com.mendix.core.action.user.LoginAction;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Installs AfterLoginActions. The actions are implemented as microflows
 * Two types:
 * 1 - sync, use SyncAfterLoginMicroFlow constant to specify the microflow to be triggered synchronously after login
 * 2 - async, use AsyncAfterLoginMicroFlow constant to specify the microflow to be triggered aysnchronously after login.
 * 
 * NOTE:
 * Since the login procedure has not yet finished, these flows cannot use $CurrentUser in their logic. The CurrentUser does not yet exist, because the user context is not finished.
 */
public class AddAfterLoginListener extends CustomJavaAction<Boolean>
{
	private Boolean triggerSyncAfterLoginMicroFlow;
	private Boolean triggerAsyncAfterLoginMicroFlow;

	public AddAfterLoginListener(IContext context, Boolean triggerSyncAfterLoginMicroFlow, Boolean triggerAsyncAfterLoginMicroFlow)
	{
		super(context);
		this.triggerSyncAfterLoginMicroFlow = triggerSyncAfterLoginMicroFlow;
		this.triggerAsyncAfterLoginMicroFlow = triggerAsyncAfterLoginMicroFlow;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		LoginListener loginActionListener = new LoginListener(LoginAction.class);
		/*
		 * INFO:
		 * we can use multiple after (and before) events
		 * an event is an action and can be either a workflow name or an action class
		 * the action class can be derived from UserAction<> and use a constructor with LocalComponent and IContext as params (see DynamicRolesAction)
		 * 
		 */
		//attach a microflow for the after event
		if(this.triggerSyncAfterLoginMicroFlow)
		{
			String flow = (String) Core.getConfiguration().getConstantValue("DynamicRoles.SyncAfterLoginMicroFlow");
			if(flow != null && !flow.isEmpty())
			{
				loginActionListener.addAfterEvent(flow);
			}
		}
		if(this.triggerAsyncAfterLoginMicroFlow)
		{
			//attach an action class for the after event
			loginActionListener.addAfterEvent(AsyncAfterLoginAction.class.getName().replace(".actions.", "."));
			//the action class must be registered
			Core.addUserAction(AsyncAfterLoginAction.class);
		}
		
		Core.addListener(loginActionListener);
		
		// Log that the Listener is started
		Core.getLogger("DynamicRoles").debug("DynamicRoles after login listener started.");

		return true;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "AddAfterLoginListener";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
